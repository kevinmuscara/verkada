{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Verkada API Wrapper","text":"<p>Universal wrapper/client for the Verkada API. This project is currently unfinished, please check the Project Roadmap for more details.</p> <p>To get started, follow this guide.</p>"},{"location":"#project-roadmap","title":"Project Roadmap","text":"Category Method Status Alerts Camera Alerts Complete, Tested, Passed Alerts Sensor Alerts Incomplete Data Sensor Data Incomplete Audit Audit Logs Incomplete Sites Guest Sites Incomplete Sites Guest Visits Incomplete Alarms Get Alarms Incomplete LPR Delete LPOI Complete, Untested LPR Get all LPOI Complete, Untested LPR Update LPOI Complete, Untested LPR Create LPOI Complete, Untested LPR Timestamp LP Complete, Untested Analytics People/Vehicle Incomplete Analytics Set MQTT Config Incomplete Analytics Get Occupancy Trend Incomplete CloudBackup Get Backup Incomplete CloudBackup Update Backup Incomplete Devices Get Camera Incomplete Footage Get Footage Incomplete Footage Get Thumbnail Incomplete People Delete POI Incomplete People Get all POI Incomplete People Update POI Incomplete People Create POI Incomplete"},{"location":"#mit-license","title":"MIT License","text":"<p>Copyright (c) 2023 Kevin Muscara</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>To get started using the wrapper client, you must first install the npm library. </p> <p>You may use any library manager you want, although I recommend using pnpm, a faster alternative to npm. </p> <p>Install the library by running the following:</p> <pre><code>$ pnpm install verkada\n</code></pre> <p>Once the library is installed, you need to initialize the wrapper with your authentication credentials:</p> <pre><code>const Verkada = require('verkada');\nconst verkada = new Verkada({\norg_id: `&lt;Your Organization Id&gt;`\napiKey: `&lt;Your API Key&gt;` });\n</code></pre> <p>If you want to change these credentials throughout your application, utilize the helper functions:</p> <pre><code>// Change Organization Id\nverkada.setOrganizationId('new_id_value');\n// Change API Key\nverkada.setAPIKey('new_key_value');\n</code></pre> <p>Now you're ready to start using the wrapper client! Check out the list of functions currently available by navigating through the various sections. </p>"},{"location":"cameras/alerts/","title":"Alerts","text":"<p>Return alerts for an organization within a specified time range. </p> <p>Alert types include <code>camera offline</code>, <code>camera online</code>, <code>tamper</code>, <code>motion</code>, <code>crowd</code>, and <code>Person of Interest</code> alerts.</p> <p>For more detailed information, click here.</p>"},{"location":"cameras/alerts/#getcameraalerts","title":"getCameraAlerts","text":"<p>As described above, this function returns alerts for an organization within a specified time range. This wrapper uses promises, so you need to provide a success callback as well as an error callback. If you don't wish to use promises, you can provide a callback method instead.</p> promise.js<pre><code>verkada.getCameraAlerts().then(\nfunction(data) {\nconsole.log(data);\n},\nfunction(err) {\nconsole.error(err);\n}\n);\n</code></pre> <p>NOTE: Choosing to provide a callback method requires you to provide an options object, even if its empty.</p> no-promise.js<pre><code>verkada.getCameraAlerts({},\nfunction(error, data) {\nif(err) {\nconsole.error(err);\n} else {\nconsole.log(data);\n}\n}\n);\n</code></pre> <p>The functions that fetch data from the API also accept a JSON object with a set of query parameters. For example, <code>start_time</code> can be used in the function:</p> no-promise-options.js<pre><code>verkada.getCameraAlerts(\n{ start_time: '1653282725' },\nfunction(error, data) {\nif(err) {\nconsole.error(err);\n} else {\nconsole.log(data);\n}\n}\n);\n</code></pre> <p>For a list of all query options available, visit the Verkada API documentation for the Cameras API.</p>"}]}